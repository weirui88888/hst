name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Create frontend production environment file
      run: |
        cat << EOF > frontend/.env.production
        VITE_OSS_BUCKET=${{ secrets.VITE_OSS_BUCKET }}
        VITE_OSS_REGION=${{ secrets.VITE_OSS_REGION }}
        VITE_OSS_DOMAIN=${{ secrets.VITE_OSS_DOMAIN }}
        VITE_OSS_DIRECTORY=${{ secrets.VITE_OSS_DIRECTORY }}
        VITE_OSS_ACCESS_KEY_ID=${{ secrets.VITE_OSS_ACCESS_KEY_ID }}
        VITE_OSS_ACCESS_KEY_SECRET=${{ secrets.VITE_OSS_ACCESS_KEY_SECRET }}
        VITE_API_BASE_URL=/api
        EOF
        
    - name: Build frontend
      run: |
        cd frontend
        pnpm run build
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  build-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        
    - name: Upload backend source
      uses: actions/upload-artifact@v4
      with:
        name: backend-source
        path: backend/

  build-frontend-docker:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: Show full project directory structure
      run: |
        echo "📁 当前工作目录结构："
        tree -L 2
        
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t hst-frontend:latest .
        
    - name: List Docker images
      run: docker images
        
    - name: Save frontend Docker image to tar
      run: docker save -o hst-frontend.tar hst-frontend:latest
        
    - name: Upload frontend image tar artifact
      uses: actions/upload-artifact@v4
      with:
        name: hst-frontend-tar
        path: hst-frontend.tar

  build-backend-docker:
    needs: [build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-source
        path: backend/
        
    - name: Create backend production environment file
      run: |
        cd backend
        cat << EOF > .env
        NODE_ENV=production
        PORT=6766
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=100
        EOF
        echo "✅ .env 文件已创建"
        echo "📄 .env 文件内容："
        cat .env
        
    - name: Show full project directory structure
      run: |
        echo "📁 当前工作目录结构："
        tree -L 2
        
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t hst-backend:latest .
        
    - name: List Docker images
      run: docker images
        
    - name: Save backend Docker image to tar
      run: docker save -o hst-backend.tar hst-backend:latest
        
    - name: Upload backend image tar artifact
      uses: actions/upload-artifact@v4
      with:
        name: hst-backend-tar
        path: hst-backend.tar

  deploy-to-server:
    needs: [build-frontend-docker, build-backend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download frontend tar artifact
      uses: actions/download-artifact@v4
      with:
        name: hst-frontend-tar
        path: ./
        
    - name: Download backend tar artifact
      uses: actions/download-artifact@v4
      with:
        name: hst-backend-tar
        path: ./
        
    - name: Deploy to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "*.tar"
        target: '~/'
        
    - name: Load and start containers on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # 停止并删除旧容器
          docker stop hst-frontend hst-backend || true
          docker rm hst-frontend hst-backend || true
          
          # 删除旧镜像
          docker rmi hst-frontend:latest hst-backend:latest || true
          
          # 加载新镜像
          docker load -i ~/hst-frontend.tar
          docker load -i ~/hst-backend.tar
          
          # 启动后端容器（连接到网络）
          docker run -d -p 6766:6766 --name hst-backend hst-backend:latest
            
          # 启动前端容器（连接到网络）
          docker run -d -p 6767:6767 --name hst-frontend hst-frontend:latest
            
          # 清理临时文件
          rm -f ~/*.tar
          
          # 显示运行状态
          docker ps
          
          # 显示网络信息
          docker network ls
          docker network inspect hst-network
