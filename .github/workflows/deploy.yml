name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      deploy-changed: ${{ steps.changes.outputs.deploy }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          frontend:
            - 'frontend/**'
            - 'frontend/**/*'
          backend:
            - 'backend/**'
            - 'backend/**/*'
          deploy:
            - '.github/workflows/deploy.yml'

  build-frontend:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.frontend-changed == 'true' || 
      needs.detect-changes.outputs.deploy-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Create frontend production environment file
      run: |
        cat << EOF > frontend/.env.production
        VITE_OSS_BUCKET=${{ secrets.VITE_OSS_BUCKET }}
        VITE_OSS_REGION=${{ secrets.VITE_OSS_REGION }}
        VITE_OSS_DOMAIN=${{ secrets.VITE_OSS_DOMAIN }}
        VITE_OSS_DIRECTORY=${{ secrets.VITE_OSS_DIRECTORY }}
        VITE_OSS_ACCESS_KEY_ID=${{ secrets.VITE_OSS_ACCESS_KEY_ID }}
        VITE_OSS_ACCESS_KEY_SECRET=${{ secrets.VITE_OSS_ACCESS_KEY_SECRET }}
        VITE_API_BASE_URL=/api
        EOF
        
    - name: Build frontend
      run: |
        cd frontend
        pnpm run build
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  build-backend:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.backend-changed == 'true' || 
      needs.detect-changes.outputs.deploy-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Upload backend source
      uses: actions/upload-artifact@v4
      with:
        name: backend-source
        path: backend/

  build-frontend-docker:
    needs: [detect-changes, build-frontend]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (needs.detect-changes.outputs.frontend-changed == 'true' || 
       needs.detect-changes.outputs.deploy-changed == 'true') &&
      needs.build-frontend.result == 'success'
    outputs:
      frontend-built: ${{ steps.set-output.outputs.frontend-built }}
    steps:
    - name: Set output
      id: set-output
      run: echo "frontend-built=true" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        
    - name: Show full project directory structure
      run: |
        echo "📁 当前工作目录结构："
        tree -L 2
        
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t hst-frontend:latest .
        
    - name: List Docker images
      run: docker images
        
    - name: Save frontend Docker image to tar
      run: docker save -o hst-frontend.tar hst-frontend:latest
        
    - name: Upload frontend image tar artifact
      uses: actions/upload-artifact@v4
      with:
        name: hst-frontend-tar
        path: hst-frontend.tar

  build-backend-docker:
    needs: [detect-changes, build-backend]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (needs.detect-changes.outputs.backend-changed == 'true' || 
       needs.detect-changes.outputs.deploy-changed == 'true') &&
      needs.build-backend.result == 'success'
    outputs:
      backend-built: ${{ steps.set-output.outputs.backend-built }}
    steps:
    - name: Set output
      id: set-output
      run: echo "backend-built=true" >> $GITHUB_OUTPUT
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-source
        path: backend/
        
    - name: Create backend production environment file
      run: |
        cd backend
        cat << EOF > .env
        NODE_ENV=production
        PORT=6766
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=100
        EOF
        echo "✅ .env 文件已创建"
        echo "📄 .env 文件内容："
        cat .env
        
    - name: Show full project directory structure
      run: |
        echo "📁 当前工作目录结构："
        tree -L 2
        
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t hst-backend:latest .
        
    - name: List Docker images
      run: docker images
        
    - name: Save backend Docker image to tar
      run: docker save -o hst-backend.tar hst-backend:latest
        
    - name: Upload backend image tar artifact
      uses: actions/upload-artifact@v4
      with:
        name: hst-backend-tar
        path: hst-backend.tar

  deploy-to-server:
    needs: [detect-changes, build-frontend-docker, build-backend-docker]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      ((needs.detect-changes.outputs.frontend-changed == 'true' && (needs.build-frontend-docker.result == 'success' || needs.build-frontend-docker.result == 'skipped')) || 
       (needs.detect-changes.outputs.backend-changed == 'true' && (needs.build-backend-docker.result == 'success' || needs.build-backend-docker.result == 'skipped')) ||
       (needs.detect-changes.outputs.deploy-changed == 'true' && ((needs.build-frontend-docker.result == 'success' || needs.build-frontend-docker.result == 'skipped') || (needs.build-backend-docker.result == 'success' || needs.build-backend-docker.result == 'skipped'))))
    continue-on-error: false
    
    steps:
    - name: Download frontend tar artifact
      if: |
        needs.detect-changes.outputs.frontend-changed == 'true' || 
        needs.detect-changes.outputs.deploy-changed == 'true'
      uses: actions/download-artifact@v4
      with:
        name: hst-frontend-tar
        path: ./
        
    - name: Download backend tar artifact
      if: |
        needs.detect-changes.outputs.backend-changed == 'true' || 
        needs.detect-changes.outputs.deploy-changed == 'true'
      uses: actions/download-artifact@v4
      with:
        name: hst-backend-tar
        path: ./
        
    - name: Check downloaded artifacts
      run: |
        echo "📦 检查下载的构建产物："
        ls -la *.tar 2>/dev/null || echo "没有找到 tar 文件"
        
        if [ -f hst-frontend.tar ]; then
          echo "✅ 前端镜像已下载"
        else
          echo "⚠️  前端镜像未找到"
        fi
        
        if [ -f hst-backend.tar ]; then
          echo "✅ 后端镜像已下载"
        else
          echo "⚠️  后端镜像未找到"
        fi
        
    - name: Deploy to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "*.tar"
        target: '~/'
        
    - name: Load and start containers on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # 检查哪些镜像需要更新
          FRONTEND_UPDATE=false
          BACKEND_UPDATE=false
          
          if [ -f ~/hst-frontend.tar ]; then
            FRONTEND_UPDATE=true
            echo "🔄 检测到前端镜像更新"
          fi
          
          if [ -f ~/hst-backend.tar ]; then
            BACKEND_UPDATE=true
            echo "🔄 检测到后端镜像更新"
          fi
          
          # 停止需要更新的容器
          if [ "$FRONTEND_UPDATE" = true ]; then
            echo "🛑 停止前端容器..."
            docker stop hst-frontend || true
            docker rm hst-frontend || true
            docker rmi hst-frontend:latest || true
          fi
          
          if [ "$BACKEND_UPDATE" = true ]; then
            echo "🛑 停止后端容器..."
            docker stop hst-backend || true
            docker rm hst-backend || true
            docker rmi hst-backend:latest || true
          fi
          
          # 加载新镜像
          if [ "$FRONTEND_UPDATE" = true ]; then
            echo "🔄 加载前端镜像..."
            docker load -i ~/hst-frontend.tar
          fi
          
          if [ "$BACKEND_UPDATE" = true ]; then
            echo "🔄 加载后端镜像..."
            docker load -i ~/hst-backend.tar
          fi
          
          # 启动容器（只启动需要更新的容器，保持其他容器运行）
          if [ "$BACKEND_UPDATE" = true ]; then
            echo "🚀 启动后端容器..."
            docker run -d -p 6766:6766 --name hst-backend hst-backend:latest
          elif ! docker ps --format "table {{.Names}}" | grep -q "hst-backend"; then
            echo "🚀 后端容器未运行，启动后端容器..."
            docker run -d -p 6766:6766 --name hst-backend hst-backend:latest
          else
            echo "✅ 后端容器已在运行，跳过启动"
          fi
          
          if [ "$FRONTEND_UPDATE" = true ]; then
            echo "🚀 启动前端容器..."
            docker run -d -p 6767:6767 --name hst-frontend hst-frontend:latest
          elif ! docker ps --format "table {{.Names}}" | grep -q "hst-frontend"; then
            echo "🚀 前端容器未运行，启动前端容器..."
            docker run -d -p 6767:6767 --name hst-frontend hst-frontend:latest
          else
            echo "✅ 前端容器已在运行，跳过启动"
          fi
          
          # 清理临时文件
          rm -f ~/*.tar
          
          # 显示运行状态
          echo "📊 当前容器状态："
          docker ps
          
          # 显示网络信息
          echo "🌐 网络信息："
          docker network ls
